#!/usr/bin/env bash

##########
# Git Commit-Msg file for validating commit message format
###
#
# Modified from https://github.com/craicoverflow/sailr
#
# This hook validates against the Conventional Commits standard:
#   - https://www.conventionalcommits.org/en/v1.0.0/
#
# @version 1.0
# @author Shawn Rice <zooley@purdue.edu>
# @author Enda https://github.com/craicoverflow/
##########

    cat <<\EOF

   ______                          _ __                            
  / ____/___  ____ ___  ____ ___  (_) /_      ____ ___  _________ _
 / /   / __ \/ __ `__ \/ __ `__ \/ / __/_____/ __ `__ \/ ___/ __ `/
/ /___/ /_/ / / / / / / / / / / / / /_/_____/ / / / / (__  ) /_/ / 
\____/\____/_/ /_/ /_/_/ /_/ /_/_/\__/     /_/ /_/ /_/____/\__, /  
                                                          /____/   
EOF

# set config values
revert=true
types=("feat" "fix" "refactor" "docs" "style" "refactor" "test" "chore" "ci" "build")
min_length=0
max_length=52

#################
# Terminal Colors
#################

###
# Regular
###
color_regular_black='\033[0;30m'
color_regular_red='\033[0;31m'
color_regular_green='\033[0;32m'
color_regular_yellow='\033[0;33m'
color_regular_blue='\033[0;34m'
color_regular_purple='\033[0;35m'
color_regular_cyan='\033[0;36m'
color_regular_white='\033[0;37m'

###
# Bold
###
color_bold_black='\033[1;30m'
color_bold_red='\033[1;31m'
color_bold_green='\033[1;32m'
color_bold_yellow='\033[1;33m'
color_bold_blue='\033[1;34m'
color_bold_purple='\033[1;35m'
color_bold_cyan='\033[1;36m'
color_bold_white='\033[1;37m'

###
# Underline
###
color_underline_black='\033[4;30m'
color_underline_red='\033[4;31m'
color_underline_green='\033[4;32m'
color_underline_yellow='\033[4;33m'
color_underline_blue='\033[4;34m'
color_underline_purple='\033[4;35m'
color_underline_cyan='\033[4;36m'
color_underline_white='\033[4;37m'

###
# Background
###
color_background_black='\033[40m'
color_background_red='\033[41m'
color_background_green='\033[42m'
color_background_yellow='\033[43m'
color_background_blue='\033[44m'
color_background_purple='\033[45m'
color_background_cyan='\033[46m'
color_background_white='\033[47m'

color_reset='\033[0m'

# build the regex pattern based on the config
function build_regex() {
  regexp="^[.0-9]+$|"

  if $revert; then
      regexp="${regexp}^([Rr]evert|[Mm]erge):? .*$|^("
  fi

  for type in "${types[@]}"
  do
    regexp="${regexp}$type|"
  done

  regexp="${regexp%|})(\(.+\))?: "

  regexp="${regexp}.{$min_length,$max_length}$"
}

# Print out a standard error message which explains
# how the commit message should be structured
function print_error() {
  commit_message=$1
  regular_expression=$2
  echo -e "\n${color_bold_red}Invalid Commit Message Format${color_reset}\n"
  echo -e "Valid types: ${color_regular_blue}${types[@]}${color_reset}"
  echo -e "Min length (first line): ${color_regular_blue}${min_length}${color_reset}"
  echo -e "Max length (first line): ${color_regular_blue}${max_length}${color_reset}"
  echo -e "Format: ${color_regular_green}type(optional scope): message${color_reset}\n"
  echo -e "Regex: ${color_regular_purple}${regexp}${color_reset}"
  echo -e "Actual commit message: ${color_regular_purple}\"${START_LINE}\"${color_reset}"
  echo -e "Actual length: ${color_regular_purple}$(echo $START_LINE | wc -c)${color_reset}\n"
}

# get the first non-comment line of the commit message
INPUT_FILE=$1
START_LINE=`grep "^[^#]" $INPUT_FILE | head -n1`

################# TEST STRINGS comment out to use
#START_LINE="feat sdasdsadsaas"
#START_LINE="feat(some txt): some txt"
#START_LINE="docs(some txt): some txt"
#START_LINE="fix(some txt): some txt"
#################

build_regex

if [[ ! $START_LINE =~ $regexp ]]; then
  # commit message is invalid according to config - block commit
  print_error
  exit 1
fi
echo -e "${color_bold_black}${color_background_green} No errors found. ${color_reset}\n"
exit 0
